#include <QtGlobal>

#include <QApplication>
#include <QPushButton>
#include <QTimer>


//#include <QtTest/QtTest>
#include <QDebug>



#include "app_types.h"

#include "mainwindow.h"
#include "ui_mainwindow.h"

#include "aboutdialog.h"
#include "ui_aboutdialog.h"

#include "emulator_ssd1306.h"






#include <Adafruit_GFX_Menu.h>

#include <Adafruit_Keyboard.h>
//#include "emulator_keypad.h"

uint8_t buffer[128 * 64 / 8];

Bitmap lcd_bitmap;


/* Global emulator instance */
MainWindow         *emul_win;

Adafruit_SSD1306   *display;

//Adafruit_GFX_Menu  *emul_menu;  /* Global menu instance */
Adafruit_Keyboard  *emul_kbd;   /* Global keyboard instance */


static char tempStr[32] = {0};
















static void gps_basis_info_display(void)
{
  //display->setFont(&mina10pt8b);
  display->setCursor(1, 1);

  //sprintf(tempStr, "%s", "[ GPS ]:");
  //qDebug("GPS Menu");
  //display->print(tempStr);

  display->setFont(NULL);
  display->setTextColor(BLACK, WHITE);
  display->print("H/gqF?!");
}

static void aprs_basis_info_display(void)
{
  display->setFont(&mina10pt8b);
  display->setTextColor(WHITE, BLACK);
  display->setCursor(0, 9);

  sprintf(tempStr, "%s", "[ APRS ]:");
  //qDebug("APRS Menu");
  display->print(tempStr);
}

static void show_about(Bitmap *bm)
{

  static const unsigned char PROGMEM logo[] = {

  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x04, 0x0c, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x80, 
  0x00, 0x07, 0x1c, 0x01, 0x00, 0x08, 0x01, 0x00, 0x30, 0xd0, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 
  0x00, 0x07, 0xfc, 0x02, 0x04, 0x10, 0x03, 0x80, 0x71, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x02, 0x6c, 
  0x00, 0x03, 0xfc, 0x07, 0x03, 0x10, 0x03, 0xff, 0xf3, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x02, 0x54, 
  0x00, 0x03, 0xfc, 0x4f, 0x01, 0xf8, 0x03, 0xff, 0xf3, 0x60, 0x00, 0x00, 0x00, 0x00, 0x02, 0x44, 
  0x00, 0x07, 0x8c, 0xff, 0x87, 0xfe, 0x07, 0xc0, 0x3f, 0x60, 0x08, 0x00, 0x00, 0x04, 0x02, 0x44, 
  0x00, 0x07, 0x0d, 0xff, 0xdf, 0xff, 0x4f, 0x01, 0xbe, 0x60, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 
  0x05, 0xcf, 0x6f, 0xc1, 0xf0, 0x07, 0xce, 0x00, 0xbe, 0x64, 0x18, 0x04, 0x00, 0x84, 0x00, 0x00, 
  0x00, 0xee, 0x2f, 0x80, 0xe6, 0x13, 0xfc, 0x00, 0x3e, 0x7c, 0x38, 0x06, 0x00, 0x06, 0x00, 0x20, 
  0x00, 0x7c, 0x0f, 0x08, 0x68, 0x08, 0xf8, 0x7f, 0x7e, 0x7e, 0x70, 0x07, 0xff, 0x87, 0x80, 0x00, 
  0x00, 0x7c, 0x0e, 0x1c, 0x20, 0x60, 0x79, 0xff, 0xf0, 0x1f, 0xe0, 0x0f, 0xff, 0xcf, 0x80, 0x60, 
  0x00, 0x78, 0x0e, 0x1e, 0x10, 0x70, 0x31, 0xe0, 0x10, 0x03, 0xf7, 0x8f, 0x81, 0xcf, 0xdf, 0xe0, 
  0x00, 0x38, 0xce, 0x1e, 0x18, 0xf8, 0x11, 0xc0, 0x18, 0x01, 0xff, 0xde, 0x00, 0xec, 0xdf, 0xc0, 
  0x00, 0x79, 0xcf, 0x1e, 0x18, 0xf0, 0x51, 0xff, 0x8c, 0x7f, 0x1d, 0xfc, 0x30, 0x6c, 0xf9, 0xc0, 
  0x00, 0x73, 0xcf, 0x18, 0x18, 0xe0, 0x51, 0xff, 0xc4, 0xff, 0x80, 0xf8, 0x41, 0xec, 0x60, 0xc0, 
  0x00, 0x73, 0xcf, 0x00, 0x18, 0x80, 0x98, 0x01, 0xfc, 0xe3, 0xc2, 0x70, 0x07, 0x8e, 0x01, 0xc0, 
  0x00, 0xf3, 0x9f, 0x00, 0x38, 0x00, 0x1c, 0x00, 0x7c, 0xe0, 0xc7, 0x30, 0x3e, 0x1e, 0x07, 0xc0, 
  0x03, 0xe3, 0x8f, 0x00, 0xb8, 0x0f, 0xff, 0xf8, 0x3c, 0xc1, 0xcf, 0xa3, 0xf8, 0x3c, 0x1f, 0x80, 
  0x07, 0xd7, 0x83, 0x01, 0x79, 0x1f, 0xf7, 0xff, 0x1c, 0xc1, 0xcf, 0xe7, 0x00, 0x78, 0x1e, 0x00, 
  0x03, 0xc0, 0x06, 0x0c, 0xf8, 0x0f, 0xe0, 0x03, 0x8c, 0xc1, 0x9f, 0xe7, 0x01, 0xf0, 0x0c, 0x00, 
  0x00, 0xc1, 0x1f, 0x5f, 0xfc, 0x27, 0x80, 0x1f, 0x8c, 0xe3, 0x9e, 0x67, 0x07, 0xe3, 0x8c, 0x00, 
  0x01, 0xd7, 0x9f, 0x1f, 0xfa, 0x93, 0xc1, 0xff, 0x0c, 0xe3, 0x9a, 0x63, 0xff, 0xc7, 0x8c, 0x00, 
  0x01, 0xc7, 0x8f, 0x9e, 0x78, 0x45, 0xe7, 0xfe, 0x8c, 0xff, 0x98, 0x31, 0xfe, 0x4f, 0xce, 0x00, 
  0x03, 0xef, 0xaf, 0x58, 0x39, 0xf1, 0xff, 0x8c, 0x1e, 0x7f, 0x98, 0x70, 0x00, 0xff, 0xe6, 0x00, 
  0x03, 0x87, 0x8f, 0x1c, 0x3a, 0xf4, 0x7e, 0x20, 0x7e, 0x38, 0x9c, 0x78, 0x03, 0xfe, 0xe7, 0x00, 
  0x03, 0xaf, 0x8f, 0xb8, 0x38, 0xfa, 0xfc, 0x6a, 0x3f, 0x01, 0xf8, 0x3e, 0x0f, 0x00, 0x73, 0x80, 
  0x01, 0x8d, 0xaf, 0xdc, 0x3c, 0xfc, 0x1a, 0x81, 0x77, 0xff, 0xf8, 0x77, 0xfc, 0x00, 0x39, 0x80, 
  0x01, 0xfd, 0x8f, 0x9c, 0x3f, 0xee, 0xb8, 0x79, 0xf3, 0xff, 0xe0, 0x63, 0xb0, 0x00, 0x1f, 0x80, 
  0x03, 0x7d, 0xaf, 0xd8, 0x7f, 0xef, 0x3b, 0xff, 0xe1, 0x8c, 0x60, 0x40, 0x00, 0x00, 0x0f, 0x80, 
  0x00, 0x48, 0xc6, 0xf8, 0xdf, 0xc7, 0xff, 0xff, 0xe0, 0x8c, 0x20, 0x20, 0x00, 0x00, 0x03, 0x00, 
  0x04, 0x0c, 0xd7, 0xb9, 0x9c, 0x83, 0xff, 0x8c, 0x60, 0x00, 0x30, 0x00, 0x00, 0x00, 0x01, 0x00, 
  0x00, 0x00, 0xc7, 0xc0, 0x18, 0x07, 0x8f, 0x00, 0x40, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
  0x00, 0x00, 0x6b, 0x81, 0x18, 0x07, 0x0f, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x77, 0x80, 0x10, 0x02, 0x06, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xff, 0x80, 0x10, 0x06, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x01, 0xf1, 0x80, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x01, 0x80, 0xc0, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

  };

  display->drawBitmap(0, 0, logo, 128, 64, WHITE);
  /*
  gfx_blitImage(bm,  0, 0, &bertos_logo);
  gfx_setFont(bm, &font_mina);
  text_xyprintf(bm,  0, 41, TEXT_CENTER, "BeRTOS | AVR | KF163");
  text_xyprintf(bm,  0, 51, TEXT_CENTER, "APRS Tracker by DK6YF" );
  */
  //display->display();
}







uint8_t gps_status = 0;

static void demo1_menu_info_display(void)
{

}

static void gps_status_toggle(iptr_t value)
{
  gps_status ^= ( 1 << *(uint8_t*)&value);
}




static struct MenuItem sys_items[] =
{
  /* Label */                         /* Flags */                   /* Hook */                                  /* User data*/
  { (const_iptr_t)"Active SENSORS",   0,                            (MenuHook)menu_handle,                      (iptr_t)&lcd_bitmap },
  { (const_iptr_t)"Active MODULES",   0,                            (MenuHook)menu_handle,                      (iptr_t)&lcd_bitmap },
  { (const_iptr_t)"Show VERSION",     MIF_TOGGLE | MIF_SHOWSCREEN,  (MenuHook)demo1_menu_info_display,          (iptr_t)&lcd_bitmap },
  { (const_iptr_t)"ABOUT ...",        MIF_TOGGLE | MIF_SHOWSCREEN,  (MenuHook)show_about,                       (iptr_t)&lcd_bitmap },
  { (const_iptr_t)"Return",           MIF_DISABLED,                 NULL,                                       (iptr_t)0 },
  { (const_iptr_t)0,                  0,                            NULL,                                       (iptr_t)0 }
};
static struct Menu sys_menu = 
{ 
  /* Items */ /* Title */       /* Flags */             /* Bitmap */    /* Selected */  /* lcd_blitBitmap */
  sys_items,  "[ SYS ]: MENU",  MF_STICKY | 0,          &lcd_bitmap,    0,

#if CPU_AVR
  0 };
#else
  0 };
#endif



static struct MenuItem gps_items[] =
{
  /* Label */                         /* Flags */                               /* Hook */                          /* User data*/
  { (const_iptr_t)"Enable GPS",       MIF_CHECKIT | MIF_TOGGLE | MIF_CHECKED,   (MenuHook)gps_status_toggle,        (iptr_t)0 },
  { (const_iptr_t)"Use GPS TIME",     MIF_CHECKIT | MIF_TOGGLE | MIF_CHECKED,   (MenuHook)demo1_menu_info_display,  (iptr_t)&lcd_bitmap },
  { (const_iptr_t)"Set UNITS SI/US",  MIF_CHECKIT | MIF_TOGGLE | MIF_CHECKED,   (MenuHook)demo1_menu_info_display,  (iptr_t)&lcd_bitmap },
  { (const_iptr_t)"Set TIMEZONE",     0,                                        (MenuHook)demo1_menu_info_display,  (iptr_t)&lcd_bitmap },
  { (const_iptr_t)"Return",           MIF_DISABLED,                             NULL,                               (iptr_t)0 },
  { (const_iptr_t)0,                  0,                                        NULL,                               (iptr_t)0 }
};
static struct Menu gps_menu = 
{ 
  /* Items */ /* Title */       /* Flags */             /* Bitmap */    /* Selected */  /* lcd_blitBitmap */
  gps_items,  "[ GPS ]: MENU",  MF_STICKY | 0,          &lcd_bitmap,    0,

#if CPU_HARVARD
  0 };
#else
  0 };
#endif


/* TOP Level Screens to display*/
static struct MenuItem info_items[] =
{
  /* Label */                               /* Flags */     /* Hook */              /* User data*/
  { (const_iptr_t)gps_basis_info_display,   MIF_RENDERHOOK, (MenuHook)menu_handle,  (iptr_t)&gps_menu },
  { (const_iptr_t)aprs_basis_info_display,  MIF_RENDERHOOK, (MenuHook)menu_handle,  (iptr_t)&sys_menu },
  { (const_iptr_t)0,                        0,              NULL,                   (iptr_t)0 }
};
static struct Menu info_screens =
{
  /* Items */ /* Title */       /* Flags */             /* Bitmap */   /* Selected */  /* lcd_blitBitmap */
  info_items, "ROOT",           MF_STICKY | MF_SAVESEL, &lcd_bitmap,   0,              

#if CPU_HARVARD
  0 };
#else
  0 };
#endif











MainWindow::MainWindow(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::MainWindow)
{
    /* Build GUI window configured with Qt Creator in file mainwindow.ui */
    ui->setupUi(this);

    /* Set global pointer to this instance */
    emul_win = this;

    /* Create layout for emulator widget */
    QVBoxLayout* verticalLayout = new QVBoxLayout;
    verticalLayout->setSpacing(0);
    verticalLayout->setMargin(0);
    ui->emulatorContainer->setLayout(verticalLayout);

    /* Create Emulator Widget */
    Adafruit_SSD1306 *emulator = new Adafruit_SSD1306;

    /* Set global display pointer to this instance */
    display = emulator;

    /* Set some default parameter */
    emulator->setEmulatorZoom(2);           /* Set zooming level */
    emulator->setSpeedEmulation(false);     /* Set simulation speed */

    /* Connect Emulator to centralWidget */
    ui->emulatorContainer->layout()->addWidget(emulator);

    /* Create Window Title and Icon */
    this->setWindowTitle("Adafruit OLED emulator ("
            +QString::number(emulator->device_width()  * emulator->getEmulatorZoom()) + "x"
            +QString::number(emulator->device_height() * emulator->getEmulatorZoom()) + ")");

    this->setWindowIcon(QIcon(":/res/icon"));
    
    /* Initialize Emulator */
    int oled_type = OLED_ADAFRUIT_I2C_128x64;
    if (emulator->oled_is_spi_proto(oled_type)){
        //SPI change parameters to fit to your LCD
        if ( !emulator->init(OLED_SPI_DC,OLED_SPI_RESET,OLED_SPI_CS, oled_type) )
            exit(EXIT_FAILURE);
    }
    else{
        //I2C change parameters to fit to your LCD
        if ( !emulator->init(OLED_I2C_RESET, oled_type) )
            exit(EXIT_FAILURE);
    }
    
    emulator->begin();
    

    /* Get size of keypad so we can determine total height of window */
    QMargins keypad_margins = ui->gridLayout->contentsMargins();
    int keypad_height = ui->gridLayout->sizeHint().height() + 
                        keypad_margins.top() +
                        keypad_margins.bottom();

    //qDebug("%d", margins.top());

    /* Resize Window */
    this->setFixedSize(emulator->device_width()  * emulator->getEmulatorZoom(), 
                       emulator->device_height() * emulator->getEmulatorZoom() + 
                       this->menuBar()->size().height() +
                       this->statusBar()->size().height() +  keypad_height );

    this->statusBar()->setSizeGripEnabled(false);

    this->statusBar()->showMessage("Loaded SSD1603..");


    /* Search all buttons and add to a group */
    QButtonGroup* group = new QButtonGroup(this);

    for (int i = 0; i < ui->gridLayout->count(); ++i)
    {
      QWidget *widget = ui->gridLayout->itemAt(i)->widget();
      if (widget != NULL)
      {
        group->addButton(dynamic_cast<QPushButton*>(widget));
      }
    }

    /* Create SLOT for every released button */
    connect(group, SIGNAL(buttonReleased(int)), this, SLOT(onGroupButtonClicked(int)));




    /* Create Menu */
    //emul_menu = new Adafruit_GFX_Menu;
    //emul_menu->menu_init(&lcd_bitmap, buffer, SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT); 
    menu_init(&lcd_bitmap, buffer, SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT); 
    current_menu = &info_screens;

    /* Connect Keyboard */
    emul_kbd  = new Adafruit_Keyboard;
    emul_kbd->kbd_init();

    /* Keyboard timer to poll buttons */
    timerId = startTimer(10);



    /* ==> INSERT CODE HERE - BEGIN <== */

#if 0
    /* Initialize Screen */
    emulator->clearDisplay();   // clears the screen and buffer

    // Set default color and size
    emulator->setTextSize(1);
    //emulator->setTextColor(BLACK, WHITE);
    emulator->setTextColor(WHITE, BLACK);

    // Using Adafruit fonts
    emulator->setFont(&FreeSans12pt7b);
    emulator->setCursor(7,40);
    static char tmp[36] = {0};
    sprintf(tmp, "%s", "Hallo Welt!");
    emulator->print(tmp);
    
    // Using glcdfont
    emulator->setFont(&hp58pt8b);
    //emulator->setFont(&mina10pt8b);
    emulator->setCursor(0, 10);
    sprintf(tmp, "%s", "THIS IS HP5 FONT!");
    //sprintf(tmp, "%s", "All your base are us!");
    emulator->print(tmp);
    
    // Use of standard text
    //emulator->setFont(NULL);
    //emulator->print("All your base are us");
#endif

    show_about(&lcd_bitmap);

#if 0
    emulator->drawPixel(0, 0, WHITE);
    emulator->drawPixel(127, 0, WHITE);
    emulator->drawPixel(0, 63, WHITE);
    emulator->drawPixel(127, 63, WHITE);
#endif
    /* Must be called at the end to refresh the display */
    emulator->display();

    /* ==> INSERT CODE HERE - END <== */


}

MainWindow::~MainWindow()
{
    delete ui;
}



void MainWindow::loop_menu()
{
    //emul_menu->screen_handle(&info_screens);
    //screen_handle(&info_screens);
    //show_about(&lcd_bitmap);
}






/* Called by timer */
void MainWindow::timerEvent(QTimerEvent *event)
{
    Adafruit_Keyboard *poll_kbd = new Adafruit_Keyboard();

    poll_kbd->kbd_poll();
}


/* Keyboard emulation

   This function emulates the pressed buttons on a real keyboard and returns
   a specific type keymask_t for keyboard driver.
*/
int MainWindow::readButtons(void)
{
    /* Search all buttons and add to a group */
    QPushButton* button = new QPushButton(this);

    QString objName = NULL;

    int keymask = 0;

    for (int i = 0; i < ui->gridLayout->count(); ++i)
    {
      QWidget *widget = ui->gridLayout->itemAt(i)->widget();
      if (widget != NULL)
      {
        button = dynamic_cast<QPushButton*>(widget);
        if (button->isDown()) {
            objName = widget->objectName();

            if       (objName == "pushButton_UP")       keymask |= (K_UP);
            else if  (objName == "pushButton_DOWN")     keymask |= (K_DOWN);
            else if  (objName == "pushButton_LEFT")     keymask |= (K_LEFT);
            else if  (objName == "pushButton_RIGHT")    keymask |= (K_RIGHT);
            else if  (objName == "pushButton_OK")       keymask |= (K_OK);

            //qDebug("%s", qPrintable(objName));
        }
      }
    }

    return keymask;
}




#if 0
extern "C" int emul_kbdReadCols(void)
{
    return 0;
}
#endif


















/* SLOT Functions for GUI interaction */

void MainWindow::on_actionQuit_triggered()
{
    QApplication::quit();
}

void MainWindow::on_actionAbout_triggered()
{
    AboutDialog dlg(this);
    dlg.exec();
}


/* SLOT Functions for BUTTON interactions */
#define DISABLE_SLOT_MSG    0

void MainWindow::on_pushButton_LEFT_pressed()
{
    ui->statusBar->showMessage("Press LEFT");
    #if DISABLE_SLOT_MSG
    qDebug("LEFT");
    #endif
}

void MainWindow::on_pushButton_RIGHT_pressed()
{
    ui->statusBar->showMessage("Press RIGHT");
    #if DISABLE_SLOT_MSG
    qDebug("RIGHT");
    #endif
}

void MainWindow::on_pushButton_UP_pressed()
{
    ui->statusBar->showMessage("Press UP");
    #if DISABLE_SLOT_MSG
    qDebug("UP");
    #endif
}

void MainWindow::on_pushButton_DOWN_pressed()
{
    ui->statusBar->showMessage("Press DOWN");
    #if DISABLE_SLOT_MSG
    qDebug("DOWN");
    #endif
}

void MainWindow::on_pushButton_OK_pressed()
{
    ui->statusBar->showMessage("Press OK");
    #if DISABLE_SLOT_MSG
    qDebug("OK");
    #endif
}

void MainWindow::onGroupButtonClicked(int)
{
    ui->statusBar->clearMessage();
    #if DISABLE_SLOT_MSG
    qDebug("Released!");
    #endif
}




